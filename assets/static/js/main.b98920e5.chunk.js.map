{"version":3,"sources":["components/List.js","components/ListsList.js","components/ListsPage.js","actions/index.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["ISPUBLIC_VALUES","List","props","id","concat","list","react_default","a","createElement","className","title","description","value","isPublic","onChange","e","onIsPublicChange","target","map","key","ListsList","lists","components_List","ListsPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTitleChange","setState","onDescriptionChange","onCreateList","preventDefault","state","resetForm","toggleForm","showNewCardForm","console","log","components_ListsList","onClick","onSubmit","type","placeholder","renderListsList","Component","_id","uniqueId","App","_ref","dispatch","payload","createList","_ref2","setListIsPublic","components_ListsPage","connect","Boolean","window","location","hostname","match","updeep","require","mockLists","store","createStore","arguments","length","undefined","action","i","updateIn","composeWithDevTools","ReactDOM","render","es","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b98920e5.chunk.js","sourcesContent":["// An individual list\n\nimport React from 'react';\n// Note how the isPublic is updated without making this into a React Component with state.\n// By using props to populate the UI, we enable time travel and a direct connection with the store.\n\nconst ISPUBLIC_VALUES = [\n\t'Public',\n\t'Private'\n];\n\nconst List = props => {\n\tlet id=`select-${props.list.id}`;\n\treturn (\n\t\t<div className=\"list\">\n\t\t\t<div className=\"list-header\">\n\t\t\t\t<div>{props.list.title}</div>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"list-body\">{props.list.description}</div>\n\t\t\t<div className=\"list-status\">\n\t\t\t\t<select value={props.list.isPublic} onChange={onIsPublicChange} id={id}>\n\t\t\t\t\t{ISPUBLIC_VALUES.map(isPublic => (\n\t\t\t\t\t\t<option key={isPublic} value={isPublic}>{isPublic}</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t\tStatus: {props.list.isPublic}\n\t\t</div>\n\t);\n\n\tfunction onIsPublicChange(e) {\n\t\tprops.onIsPublicChange({ 'id': props.list.id, 'isPublic': e.target.value });\n\t}\n};\n\nexport default List;\n","// List of all lists\n\nimport React from 'react';\nimport List from './List';\n\nconst ListsList = props => {\n\treturn (\n\t\t<div className=\"lists-list\">\n\t\t\t<div className=\"lists-list-title\">\n\t\t\t\t<strong>My lists</strong>\n\t\t\t</div>\n\t\t\t{props.lists.map(list => (\n\t\t\t\t<List\n\t\t\t\t\tkey={list.id}\n\t\t\t\t\tlist={list}\n\t\t\t\t\tonIsPublicChange={props.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default ListsList;\n","// Page to display list of lists\n\nimport React, { Component } from 'react';\nimport ListsList from './ListsList';\n\nclass ListsPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log(' ListsPage props: ', props);\n\t\tthis.state = {\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t};\n\t}\n\n\tonTitleChange = (e) => {\n\t\tthis.setState({ 'title': e.target.value });\n\t}\n\n\tonDescriptionChange = (e) => {\n\t\tthis.setState({ 'description': e.target.value });\n\t}\n\n\tresetForm() {\n\t\tthis.setState({\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t});\n\t}\n\n\tonCreateList = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.onCreateList({\n\t\t\t'title': this.state.title,\n\t\t\t'description': this.state.description\n\t\t});\n\t\tthis.resetForm();\n\t}\n\n\ttoggleForm = () => {\n\t\tthis.setState({ 'showNewCardForm': !this.state.showNewCardForm });\n\t}\n\n\trenderListsList() {\n\t\tconst { lists } = this.props;\n\t\treturn <ListsList\n\t\t\tlists={lists}\n\t\t\tonIsPublicChange={this.props.onIsPublicChange}\n\t\t/>;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"lists-list\">\n\t\t\t\t<div className=\"lists-list-header\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"button button-default\"\n\t\t\t\t\t\tonClick={this.toggleForm}\n\t\t\t\t\t>\n\t\t\t\t\t+ New list</button>\n\t\t\t\t</div>\n\t\t\t\t{this.state.showNewCardForm && (\n\t\t\t\t\t<form className=\"lists-list-form\" onSubmit={this.onCreateList}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onTitleChange}\n\t\t\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"title\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onDescriptionChange}\n\t\t\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"description\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t\t<div className=\"lists\">\n\t\t\t\t\t{this.renderListsList()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ListsPage;\n","let _id = 1;\nexport function uniqueId() {\n\treturn _id++;\n}\n\nexport function createList({ title, description }) {\n\treturn {\n\t\t'type': 'CREATE_LIST',\n\t\t'payload': {\n\t\t\t'id': uniqueId(),\n\t\t\ttitle,\n\t\t\tdescription\n\t\t}\n\t};\n}\n\nexport function setListIsPublic({ id, isPublic }) {\n\treturn {\n\t\t'type': 'SET_LIST_IS_PUBLIC',\n\t\t'payload': {\n\t\t\t'id': id,\n\t\t\tisPublic\n\t\t}\n\t};\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ListsPage from './components/ListsPage';\nimport './App.css';\nimport './App.scss';\nimport { createList, setListIsPublic } from './actions';\n\nclass App extends Component {\n\tonCreateList = ({ title, description }) => {\n\t\tthis.props.dispatch(createList({ title, description }));\n\t}\n\n\tonIsPublicChange = ({ id, isPublic }) => {\n\t\tthis.props.dispatch(setListIsPublic({ id, isPublic }));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"main-content\">\n\t\t\t\t<ListsPage\n\t\t\t\t\tlists={this.props.lists}\n\t\t\t\t\tonCreateList={this.onCreateList}\n\t\t\t\t\tonIsPublicChange={this.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\t'lists': state.lists\n\t};\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { uniqueId } from '../actions';\n\nvar updeep = require('updeep');\n\nconst mockLists = [\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'Books',\n\t\t'description': 'My favourite books',\n\t\t'isPublic': false\n\t},\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'People',\n\t\t'description': 'My favourite people',\n\t\t'isPublic': false\n\t}\n];\n\nexport default function lists(state = { 'lists': mockLists }, action) {\n\tswitch (action.type) {\n\t\tcase 'CREATE_LIST': {\n\t\t\tfunction addList(lists) {\n\t\t\t\treturn [].concat(lists, action.payload);\n\t\t\t}\n\t\t\treturn updeep({ 'lists': addList }, state); // updeep calls  addList with the lists object as argument. So this appends action.payload to state.lists.\n\t\t}\n\n\t\tcase 'SET_LIST_IS_PUBLIC': {\n\t\t\t// could use map but why carry on after list is found?\n\t\t\tfor (let i=0; i< state.lists.length; i++) {\n\t\t\t\tif (state.lists[i].id === action.payload.id) {\n\t\t\t\t\treturn updeep.updateIn(`lists.${i}.isPublic`, action.payload.isPublic, state);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn state; // in case list was not found\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport lists from './reducers';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(lists, composeWithDevTools(\n \t// applyMiddleware(...middleware),\n \t// other store enhancers if any\n));\n\n// const store = createStore(lists);\n\nReactDOM.render (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n\tmodule.hot.accept();\n}\n"],"sourceRoot":""}