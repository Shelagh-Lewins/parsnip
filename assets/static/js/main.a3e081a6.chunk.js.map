{"version":3,"sources":["components/List.js","components/ListsList.js","components/ListsPage.js","actions/index.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["List","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onIsPublicChange","e","setState","isPublic","target","value","console","log","state","id","list","title","description","react_default","a","createElement","className","onChange","Component","ListsList","lists","map","components_List","key","ListsPage","onTitleChange","onDescriptionChange","onCreateList","preventDefault","resetForm","toggleForm","showNewCardForm","components_ListsList","onClick","onSubmit","type","placeholder","renderListsList","_id","uniqueId","App","_ref","dispatch","payload","createList","_ref2","setListIsPublic","components_ListsPage","connect","Boolean","window","location","hostname","match","updeep","require","mockLists","store","createStore","arguments","length","undefined","action","concat","i","updateIn","composeWithDevTools","ReactDOM","render","es","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3e081a6.chunk.js","sourcesContent":["// An individual list\n\nimport React, { Component } from 'react';\n\nclass List extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t'id': props.list.id,\n\t\t\t'title': props.list.title,\n\t\t\t'description': props.list.description,\n\t\t\t'isPublic': props.list.isPublic\n\t\t};\n\t}\n\n\tonIsPublicChange = (e) => {\n\t\tthis.setState({ 'isPublic': e.target.value });\n\t\tconsole.log('id: ', this.state.id);\n\t\tthis.props.onIsPublicChange({\n\t\t\t'id': this.state.id,\n\t\t\t'isPublic': e.target.value === 'public'\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"list\">\n\t\t\t\t<div className=\"list-header\">\n\t\t\t\t\t<div>{this.state.title}</div>\n\t\t\t\t</div>\n\t\t\t\t<hr />\n\t\t\t\t<div className=\"list-body\">{this.state.description}</div>\n\t\t\t\t<div className=\"list-status\">\n\t\t\t\t\t<select id=\"is-public\" value={this.state.isPublic} onChange={this.onIsPublicChange}>\n\t\t\t\t\t\t<option value=\"private\">Private</option>\n\t\t\t\t\t\t<option value=\"public\">Public</option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\tStatus: {this.state.isPublic}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default List;\n","// List of all lists\n\nimport React from 'react';\nimport List from './List';\n\nconst ListsList = props => {\n\treturn (\n\t\t<div className=\"lists-list\">\n\t\t\t<div className=\"lists-list-title\">\n\t\t\t\t<strong>My lists</strong>\n\t\t\t</div>\n\t\t\t{props.lists.map(list => (\n\t\t\t\t<List\n\t\t\t\t\tkey={list.id}\n\t\t\t\t\tlist={list}\n\t\t\t\t\tonIsPublicChange={props.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default ListsList;\n","// Page to display list of lists\n\nimport React, { Component } from 'react';\nimport ListsList from './ListsList';\n\nclass ListsPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tconsole.log(' ListsPage props: ', props);\n\t\tthis.state = {\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t};\n\t}\n\n\tonTitleChange = (e) => {\n\t\tthis.setState({ 'title': e.target.value });\n\t}\n\n\tonDescriptionChange = (e) => {\n\t\tthis.setState({ 'description': e.target.value });\n\t}\n\n\tresetForm() {\n\t\tthis.setState({\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t});\n\t}\n\n\tonCreateList = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.onCreateList({\n\t\t\t'title': this.state.title,\n\t\t\t'description': this.state.description\n\t\t});\n\t\tthis.resetForm();\n\t}\n\n\ttoggleForm = () => {\n\t\tthis.setState({ 'showNewCardForm': !this.state.showNewCardForm });\n\t}\n\n\trenderListsList() {\n\t\tconst { lists } = this.props;\n\t\treturn <ListsList\n\t\t\tlists={lists}\n\t\t\tonIsPublicChange={this.props.onIsPublicChange}\n\t\t/>;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"lists-list\">\n\t\t\t\t<div className=\"lists-list-header\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"button button-default\"\n\t\t\t\t\t\tonClick={this.toggleForm}\n\t\t\t\t\t>\n\t\t\t\t\t+ New list</button>\n\t\t\t\t</div>\n\t\t\t\t{this.state.showNewCardForm && (\n\t\t\t\t\t<form className=\"lists-list-form\" onSubmit={this.onCreateList}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onTitleChange}\n\t\t\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"title\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onDescriptionChange}\n\t\t\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"description\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t\t<div className=\"lists\">\n\t\t\t\t\t{this.renderListsList()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ListsPage;\n","let _id = 1;\nexport function uniqueId() {\n\treturn _id++;\n}\n\nexport function createList({ title, description }) {\n\treturn {\n\t\t'type': 'CREATE_LIST',\n\t\t'payload': {\n\t\t\t'id': uniqueId(),\n\t\t\ttitle,\n\t\t\tdescription\n\t\t}\n\t};\n}\n\nexport function setListIsPublic({ id, isPublic }) {\n\treturn {\n\t\t'type': 'SET_LIST_IS_PUBLIC',\n\t\t'payload': {\n\t\t\t'id': id,\n\t\t\tisPublic\n\t\t}\n\t};\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ListsPage from './components/ListsPage';\nimport './App.css';\nimport './App.scss';\nimport { createList, setListIsPublic } from './actions';\n\nclass App extends Component {\n\tonCreateList = ({ title, description }) => {\n\t\tthis.props.dispatch(createList({ title, description }));\n\t}\n\n\tonIsPublicChange = ({ id, isPublic }) => {\n\t\tconsole.log('onIsPublicChange ', id);\n\t\tthis.props.dispatch(setListIsPublic({ id, isPublic }));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"main-content\">\n\t\t\t\t<ListsPage\n\t\t\t\t\tlists={this.props.lists}\n\t\t\t\t\tonCreateList={this.onCreateList}\n\t\t\t\t\tonIsPublicChange={this.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\t'lists': state.lists\n\t};\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { uniqueId } from '../actions';\n\nvar updeep = require('updeep');\n\nconst mockLists = [\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'Books',\n\t\t'description': 'My favourite books',\n\t\t'isPublic': false\n\t},\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'People',\n\t\t'description': 'My favourite people',\n\t\t'isPublic': false\n\t}\n];\n\nexport default function lists(state = { 'lists': mockLists }, action) {\n\tswitch (action.type) {\n\t\tcase 'CREATE_LIST': {\n\t\t\tfunction addList(lists) {\n\t\t\t\treturn [].concat(lists, action.payload);\n\t\t\t}\n\t\t\treturn updeep({ 'lists': addList }, state); // updeep calls  addList with the lists object as argument. So this appends action.payload to state.lists.\n\t\t}\n\n\t\tcase 'SET_LIST_IS_PUBLIC': {\n\t\t\t// could use map but why carry on after list is found?\n\t\t\tfor (let i=0; i< state.lists.length; i++) {\n\t\t\t\tif (state.lists[i].id === action.payload.id) {\n\t\t\t\t\treturn updeep.updateIn(`lists.${i}.isPublic`, action.payload.isPublic, state);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn state; // in case list was not found\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport lists from './reducers';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(lists, composeWithDevTools(\n \t// applyMiddleware(...middleware),\n \t// other store enhancers if any\n));\n\n// const store = createStore(lists);\n\nReactDOM.render (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n\tmodule.hot.accept();\n}\n"],"sourceRoot":""}