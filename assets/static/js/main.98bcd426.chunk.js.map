{"version":3,"sources":["components/List.js","components/ListsList.js","components/ListsPage.js","actions/index.js","components/MyTopTens.js","components/NotFound.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["ISPUBLIC_VALUES","List","props","id","concat","list","value","is_public","react_default","a","createElement","className","title","description","onChange","e","target","onIsPublicChange","map","key","ListsList","lists","components_List","ListsPage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTitleChange","setState","onDescriptionChange","onCreateList","preventDefault","state","resetForm","toggleForm","showNewCardForm","components_ListsList","onClick","onSubmit","type","placeholder","renderListsList","Component","_id","uniqueId","MyTopTens","_ref","dispatch","payload","createList","_ref2","setListIsPublic","components_ListsPage","connect","NotFound","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","updeep","require","mockLists","store","createStore","arguments","length","undefined","action","i","updateIn","composeWithDevTools","ReactDOM","render","es","src_App_1","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98bcd426.chunk.js","sourcesContent":["// An individual list\n\nimport React from 'react';\n// Note how the is_public is updated without making this into a React Component with state.\n// By using props to populate the UI, we enable time travel and a direct connection with the store.\n\nconst ISPUBLIC_VALUES = [\n\t'Private',\n\t'Public',\n];\n\nconst List = props => {\n\tlet id=`select-${props.list.id}`;\n\tlet value = props.list.is_public ? 'Public' : 'Private';\n\n\treturn (\n\t\t<div className=\"list\">\n\t\t\t<div className=\"list-header\">\n\t\t\t\t<div>{props.list.title}</div>\n\t\t\t</div>\n\t\t\t<hr />\n\t\t\t<div className=\"list-body\">{props.list.description}</div>\n\t\t\t<div className=\"list-status\">\n\t\t\t\t<select value={value} onChange={onIsPublicChange} id={id}>\n\t\t\t\t\t{ISPUBLIC_VALUES.map(is_public => (\n\t\t\t\t\t\t<option key={is_public} value={is_public}>{is_public}</option>\n\t\t\t\t\t))}\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\tfunction onIsPublicChange(e) {\n\t\t// map from select options to true / false\n\t\tconst value = e.target.value === 'Public' ? true : false;\n\t\tprops.onIsPublicChange({ 'id': props.list.id, 'is_public': value });\n\t}\n};\n\nexport default List;\n","// List of all lists\n\nimport React from 'react';\nimport List from './List';\n\nconst ListsList = props => {\n\treturn (\n\t\t<div className=\"lists-list\">\n\t\t\t<div className=\"lists-list-title\">\n\t\t\t\t<strong>My lists</strong>\n\t\t\t</div>\n\t\t\t{props.lists.map(list => (\n\t\t\t\t<List\n\t\t\t\t\tkey={list.id}\n\t\t\t\t\tlist={list}\n\t\t\t\t\tonIsPublicChange={props.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default ListsList;\n","// Page to display list of lists\n\nimport React, { Component } from 'react';\nimport ListsList from './ListsList';\n\nclass ListsPage extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t};\n\t}\n\n\tonTitleChange = (e) => {\n\t\tthis.setState({ 'title': e.target.value });\n\t}\n\n\tonDescriptionChange = (e) => {\n\t\tthis.setState({ 'description': e.target.value });\n\t}\n\n\tresetForm() {\n\t\tthis.setState({\n\t\t\t'showNewCardForm': false,\n\t\t\t'title': '',\n\t\t\t'description': ''\n\t\t});\n\t}\n\n\tonCreateList = (e) => {\n\t\te.preventDefault();\n\t\tthis.props.onCreateList({\n\t\t\t'title': this.state.title,\n\t\t\t'description': this.state.description\n\t\t});\n\t\tthis.resetForm();\n\t}\n\n\ttoggleForm = () => {\n\t\tthis.setState({ 'showNewCardForm': !this.state.showNewCardForm });\n\t}\n\n\trenderListsList() {\n\t\tconst { lists } = this.props;\n\t\treturn <ListsList\n\t\t\tlists={lists}\n\t\t\tonIsPublicChange={this.props.onIsPublicChange}\n\t\t/>;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"lists-list\">\n\t\t\t\t<div className=\"lists-list-header\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"button button-default\"\n\t\t\t\t\t\tonClick={this.toggleForm}\n\t\t\t\t\t>\n\t\t\t\t\t+ New list</button>\n\t\t\t\t</div>\n\t\t\t\t{this.state.showNewCardForm && (\n\t\t\t\t\t<form className=\"lists-list-form\" onSubmit={this.onCreateList}>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onTitleChange}\n\t\t\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"title\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName=\"full-width-input\"\n\t\t\t\t\t\t\tonChange={this.onDescriptionChange}\n\t\t\t\t\t\t\tvalue={this.state.description}\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"description\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"button\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSave\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t\t<div className=\"lists\">\n\t\t\t\t\t{this.renderListsList()}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default ListsPage;\n","let _id = 1;\nexport function uniqueId() {\n\treturn _id++;\n}\n\nexport function createList({ title, description }) {\n\treturn {\n\t\t'type': 'CREATE_LIST',\n\t\t'payload': {\n\t\t\t'id': uniqueId(),\n\t\t\ttitle,\n\t\t\tdescription\n\t\t}\n\t};\n}\n\nexport function setListIsPublic({ id, is_public }) {\n\treturn {\n\t\t'type': 'SET_LIST_IS_PUBLIC',\n\t\t'payload': {\n\t\t\t'id': id,\n\t\t\tis_public\n\t\t}\n\t};\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ListsPage from './ListsPage';\nimport { createList, setListIsPublic } from '../actions';\n\n\nclass MyTopTens extends Component {\n\tonCreateList = ({ title, description }) => {\n\t\tthis.props.dispatch(createList({ title, description }));\n\t}\n\n\tonIsPublicChange = ({ id, is_public }) => {\n\t\tthis.props.dispatch(setListIsPublic({ id, is_public }));\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"main-content\">\n\t\t\t\t<ListsPage\n\t\t\t\t\tlists={this.props.lists}\n\t\t\t\t\tonCreateList={this.onCreateList}\n\t\t\t\t\tonIsPublicChange={this.onIsPublicChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nfunction mapStateToProps(state) {\n\treturn {\n\t\t'lists': state.lists\n\t};\n}\n\nexport default connect(mapStateToProps)(MyTopTens);\n","import React from 'react';\n\n\nconst NotFound = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h2>Not Found</h2>\n\t\t\t<p>The page you're looking for is not found.</p>\n\t\t</div>\n\t);\n};\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport MyTopTens from './components/MyTopTens';\nimport NotFound from './components/NotFound';\nimport './App.css';\nimport './App.scss';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={MyTopTens} />\n\t\t\t\t\t<Route component={NotFound} />\n\t\t\t\t</Switch>\n\t\t\t </BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { uniqueId } from '../actions';\n\nvar updeep = require('updeep');\n\nconst mockLists = [\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'Books',\n\t\t'description': 'My favourite books',\n\t\t'is_public': false\n\t},\n\t{\n\t\t'id': uniqueId(),\n\t\t'title': 'People',\n\t\t'description': 'My favourite people',\n\t\t'is_public': false\n\t}\n];\n\nexport default function lists(state = { 'lists': mockLists }, action) {\n\tswitch (action.type) {\n\t\tcase 'CREATE_LIST': {\n\t\t\tfunction addList(lists) {\n\t\t\t\treturn [].concat(lists, action.payload);\n\t\t\t}\n\t\t\treturn updeep({ 'lists': addList }, state); // updeep calls  addList with the lists object as argument. So this appends action.payload to state.lists.\n\t\t}\n\n\t\tcase 'SET_LIST_IS_PUBLIC': {\n\t\t\t// could use map but why carry on after list is found?\n\t\t\tfor (let i=0; i< state.lists.length; i++) {\n\t\t\t\tif (state.lists[i].id === action.payload.id) {\n\t\t\t\t\treturn updeep.updateIn(`lists.${i}.is_public`, action.payload.is_public, state);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn state; // in case list was not found\n\t\t}\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport lists from './reducers';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(lists, composeWithDevTools(\n\t// applyMiddleware(...middleware),\n\t// other store enhancers if any\n));\n\n// const store = createStore(lists);\n\nReactDOM.render (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\nif (module.hot) {\n\tmodule.hot.accept('./App', () => {\n\t\tconst NextApp = require('./App').default;\n\t\tReactDOM.render(\n\t\t\t<Provider store={store}><NextApp /></Provider>,\n\t\t\tdocument.getElementById('root')\n\t\t);\n\t});\n\n\tmodule.hot.accept('./reducers', () => {\n\t\tconst nextRootReducer = require('./reducers').default;\n\t\tstore.replaceReducer(nextRootReducer);\n\t});\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// basic recommended for React apps. Don't know if it should be enabled.\n/*\nif (module.hot) {\n\tmodule.hot.accept();\n} */\n"],"sourceRoot":""}